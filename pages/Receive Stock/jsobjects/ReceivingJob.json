{
  "unpublishedCollection": {
    "name": "ReceivingJob",
    "pageId": "Receive Stock",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tmyVar1: [],\n\tmyVar2: {},\n\t// Add or update the OperationsRequest that will be used to receive stock\n\tadd: () => {\n\t\t// validate the required fields. We need an owner, a warehouse, an Order Number and a Segment\n\t\tif ( _.isNull(inpJobOrderCodeReceiving.text) || _.isNull(selectCustomer.selectedOptionValue) || _.isNull(selectWarehouse.selectedOptionValue) || _.isNull(selectSegment.selectedOptionValue)){\n\t\t\tshowAlert(\"One of the required inputs is missing.We need an owner, a warehouse, an Order Number and a Segment \")\n\t\t\treturn\n\t\t}\n\t\t//check if the order already exists. If it does, add a new segmentRequirement and JobOrder, otherwise add the whole OperationsRequest\n\t\treturn GetOperationsRequest.run()\n\t\t\t.then(()=>{\n\t\t\t\t\t\tif (GetOperationsRequest.data.errors != null) {\n\t\t\t\t\t\t\tshowAlert(ReceiveSerialised.data.errors[0].message)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( _.isNull( GetOperationsRequest.data.data.getOperationsRequest)) {\n\t\t\t\t\t\t\t\t\treturn AddOperationsRequestReceiving.run()\n\t\t\t\t\t\t\t\t\t.then(()=>{\n\t\t\t\t\t\t\t\t\t\tif (AddOperationsRequestReceiving.data.errors != null) {\n\t\t\t\t\t\t\t\t\t\t\tshowAlert(AddOperationsRequestReceiving.data.errors.message)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tstoreValue(\"operationsRequestId\",GetOperationsRequest.data.data.getOperationsRequest.id)\n\t\t\t\t\t\t\t\t\treturn AddSegmentRequirement.run()\n\t\t\t\t\t\t\t\t\t.then(()=>{\n\t\t\t\t\t\t\t\t\t\tif (AddSegmentRequirement.data.errors != null) {\n\t\t\t\t\t\t\t\t\t\t\tshowAlert(AddSegmentRequirement.data.errors.message)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t.then(()=>{\n\t\t\treturn GetJobOrdersToReceive.run()\n\t\t\t.then(()=>{\n\t\t\t\tif (GetJobOrdersToReceive.data.errors != null) {\n\t\t\t\t\t\t\tshowAlert(ReceiveSerialised.data.errors[0].message)\n\t\t\t\t\t\t\treturn\n\t\t\t\t} else {\t\t\t\t\n\t\t\t\t\tcloseModal(\"ModalAddReceivingJob\")\n\t\t\t\t\tshowModal(\"ModalSelectJobOrder\")\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t},\n\t// Complete the receiving job, and add the endDateTime to the JobResponse\n\tcomplete: () => {\n\t\t// validate the required fields. We need a JobOrder.id and a JobResponse.id\n\t\tif ( _.isNull(tblJobOrderList.selectedRow.id) ){\n\t\t\tshowAlert(\"One of the required inputs is missing.We need a JobOrder.id and a JobResponse.id \")\n\t\t\treturn\n\t\t}\telse {\n\t\t\treturn CompleteJobOrder.run().then(()=>{\n\t\t\t\tif (CompleteJobOrder.data.errors != null) {\n\t\t\t\t\tshowAlert(AddSegmentRequirement.data.errors.message)\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\treturn GetJobOrdersToReceive.run().then(()=>{\n\t\t\t\t\t\tresetWidget(\"tblJobOrderList\")\n\t\t\t\t\t\tshowAlert(\"completed successfully\")\n\t\t\t\t\t})\n\t\t\t\t}\t\t\t\n\t\t\t})\n\n\t\t}\n\t},\n\taddMaterialRequirement: () => {\n\t\t// we need a material and a quantity\n\t\tif ( _.isNull(selectMaterialToAdd.selectedOptionValue) || _.isNull(inpMaterialQuantityToAdd.text)){\n\t\t\tshowAlert(\"One of the required inputs is missing.We need a Material and a quantity \")\n\t\t\treturn\n\t\t}\telse {\n\t\t\treturn AddMaterialRequirement.run().then(()=>{\n\t\t\t\tif (AddMaterialRequirement.data.errors != null) {\n\t\t\t\t\tshowAlert(AddSegmentRequirement.data.errors.message)\n\t\t\t\t\treturn\n\t\t\t\t} else {\n\t\t\t\t\treturn GetJobOrderMaterialReqs.run().then(()=>{\n\t\t\t\t\t\tcloseModal(\"modalAddMaterial\")\n\t\t\t\t\t\tshowAlert(\"completed successfully\")\n\t\t\t\t\t})\n\t\t\t\t}\t\t\t\n\t\t\t})\n\n\t\t}\n\t},\t\n\tflattenJobs: () => {\n    // The object which contains the\n    // final result\n    let result = [];\n \n    // loop through the object \"ob\"\n    GetJobOrdersToReceive.data.data.getEquipment.operationsRequests.forEach((oReq)=>{\n\t\t\toReq.segmentRequirements.forEach((segReq)=>{\n\t\t\t\tsegReq.jobOrders.forEach((jobOrder)=>{\n\t\t\t\t\tlet item = {\n\t\t\t\t\t\tid: jobOrder.id,\n\t\t\t\t\t\toperationsRequestCode:oReq.code,\n\t\t\t\t\t\tsegmentRequirementCode: segReq.code,\n\t\t\t\t\t\tcustomerId: oReq.customer.id,\n\t\t\t\t\t\tcreatedDateTime: jobOrder.createdDateTime,\n\t\t\t\t\t\tdispatchStatus: jobOrder.dispatchStatus\n\t\t\t\t\t}\n\t\t\t\t\tresult.push(item)\n\t\t\t\t})\t\t\n\t\t\t})\n\t\t}) \n    \n    return result;\n\t}\n}",
    "variables": [
      {
        "name": "myVar1",
        "value": []
      },
      {
        "name": "myVar2",
        "value": {}
      }
    ]
  },
  "id": "Receive Stock_ReceivingJob",
  "deleted": false,
  "gitSyncId": "6196c1950dfef900f247faaf_628deca37901344ba8d27e0b"
}