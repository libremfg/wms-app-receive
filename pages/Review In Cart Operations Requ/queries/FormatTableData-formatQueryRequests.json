{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "formatQueryRequests",
    "fullyQualifiedName": "FormatTableData.formatQueryRequests",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Review In Cart Operations Requ",
    "collectionId": "Review In Cart Operations Requ_FormatTableData",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n  //write code here\n  let ret = [];\n  const operationsResult = await QueryOperationsRequest.run();\n  if (operationsResult.data.queryOperationsRequest.length > 0) {\n    for (let i = 0; i < operationsResult.data.queryOperationsRequest.length; i++) {\n      let request = operationsResult.data.queryOperationsRequest[i];\n      for (let j = 0; j < request.segmentRequirements.length; j++) {\n        let segmentRequirement = request.segmentRequirements[j];\n        for (let k = 0; k < segmentRequirement.materialRequirements.length; k++) {\n          let materialRequirement = segmentRequirement.materialRequirements[k];\n          storeValue(\"materialCode\", materialRequirement.material.code);\n          storeValue(\"partnerCode\", request.customer.name);\n          const PartnerResult = await QueryPartners.run();\n          if (PartnerResult.data.queryPartner.length > 0) {\n            let partner = PartnerResult.data.queryPartner[0];\n            if (partner.inventoryHandlingRules.length > 0) {\n              for (let ii = 0; ii < partner.inventoryHandlingRules.length; ii++) {\n                let rule = partner.inventoryHandlingRules[ii];\n                for (let kk = 0; kk < rule.warehouse.length; kk++) {\n                  let warehouse = rule.warehouse[kk];\n                  if (rule.inventoryHandlingPolicy.material.length > 0) {\n                    if (rule.inventoryHoldingPolicy.length > 0) {\n                      for (let jj = 0; jj < rule.inventoryHoldingPolicy.length; jj++) {\n                        let holdingPolicy = rule.inventoryHoldingPolicy[jj];\n                        let line = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t requestId:request.id,\n                          customerName: request.customer.name,\n                          orderNumber: request.code,\n                          materialCode: materialRequirement.material.code,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t segmentRequirementName: segmentRequirement.code,\n                          segmentCode: segmentRequirement.segment.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t segmentID: segmentRequirement.segment.id,\n                          quantity: materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AvailableStock:materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t plannedQuantity:0,\n                          inventoryMax: holdingPolicy.inventoryMax,\n                          inventoryMin: holdingPolicy.inventoryMin,\n                          EquipmentName: warehouse.name,\n                        };\n                        ret.push(line);\n                      }\n                    }else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet line = {\n                          customerName: request.customer.name,\n                          orderNumber: request.code,\n                          materialCode: materialRequirement.material.code,\n                          segmentCode: segmentRequirement.segment.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t segmentID: segmentRequirement.segment.id,\n                          quantity: materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AvailableStock:materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t plannedQuantity:0,\n                          inventoryMax: \"Not Available\",\n                          inventoryMin: \"Not Available\",\n                          EquipmentName: warehouse.name,\n                        };\n                        ret.push(line);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  storeValue(\"InCartData\", ret);\n  return ret;\n}",
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "clientSideExecution": true,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n  //write code here\n  let ret = [];\n  const operationsResult = await QueryOperationsRequest.run();\n  if (operationsResult.data.queryOperationsRequest.length > 0) {\n    for (let i = 0; i < operationsResult.data.queryOperationsRequest.length; i++) {\n      let request = operationsResult.data.queryOperationsRequest[i];\n      for (let j = 0; j < request.segmentRequirements.length; j++) {\n        let segmentRequirement = request.segmentRequirements[j];\n        for (let k = 0; k < segmentRequirement.materialRequirements.length; k++) {\n          let materialRequirement = segmentRequirement.materialRequirements[k];\n          storeValue(\"materialCode\", materialRequirement.material.code);\n          storeValue(\"partnerCode\", request.customer.name);\n          const PartnerResult = await QueryPartners.run();\n          if (PartnerResult.data.queryPartner.length > 0) {\n            let partner = PartnerResult.data.queryPartner[0];\n            if (partner.inventoryHandlingRules.length > 0) {\n              for (let ii = 0; ii < partner.inventoryHandlingRules.length; ii++) {\n                let rule = partner.inventoryHandlingRules[ii];\n                for (let kk = 0; kk < rule.warehouse.length; kk++) {\n                  let warehouse = rule.warehouse[kk];\n                  if (rule.inventoryHandlingPolicy.material.length > 0) {\n                    if (rule.inventoryHoldingPolicy.length > 0) {\n                      for (let jj = 0; jj < rule.inventoryHoldingPolicy.length; jj++) {\n                        let holdingPolicy = rule.inventoryHoldingPolicy[jj];\n                        let line = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t requestId:request.id,\n                          customerName: request.customer.name,\n                          orderNumber: request.code,\n                          materialCode: materialRequirement.material.code,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t segmentRequirementName: segmentRequirement.code,\n                          segmentCode: segmentRequirement.segment.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t segmentID: segmentRequirement.segment.id,\n                          quantity: materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AvailableStock:materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t plannedQuantity:0,\n                          inventoryMax: holdingPolicy.inventoryMax,\n                          inventoryMin: holdingPolicy.inventoryMin,\n                          EquipmentName: warehouse.name,\n                        };\n                        ret.push(line);\n                      }\n                    }else{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet line = {\n                          customerName: request.customer.name,\n                          orderNumber: request.code,\n                          materialCode: materialRequirement.material.code,\n                          segmentCode: segmentRequirement.segment.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t segmentID: segmentRequirement.segment.id,\n                          quantity: materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t AvailableStock:materialRequirement.quantity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t plannedQuantity:0,\n                          inventoryMax: \"Not Available\",\n                          inventoryMin: \"Not Available\",\n                          EquipmentName: warehouse.name,\n                        };\n                        ret.push(line);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  storeValue(\"InCartData\", ret);\n  return ret;\n}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Review In Cart Operations Requ_FormatTableData.formatQueryRequests",
  "deleted": false,
  "gitSyncId": "6196c1950dfef900f247faaf_62986b3d4d56be2131dc38b9"
}